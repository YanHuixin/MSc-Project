%Calculate the start position of the line, 
%i.e. the position of the first "1" of the array
%Count the number of zeros before the first 1 in the array, and for each zero, Ansewer+1

findStart([0|RestOfList], Answer) :-
    findStart(RestOfList, AnsForRest),
    Answer is 1 + AnsForRest.

findStart([1|_],1).

%Calculate the end position of the line,
%i.e. the position of the last "1" of the array
%Reverse the array and calculate the total length of the array
%Calculate the Start position of the reversed array with the 'findStart' 
%Use the total length of the array - the Start position of the array after inversion to get the End position

findEnd(Input, Answer) :-
    reverse(Input, ReverseInput),
    findStart(ReverseInput, ReversedStart),
    length(Input, Length),
    Answer is Length - (ReversedStart - 1).


%Define an if-else function

if_then_else(Condition,Then,Else) :- 
   call(Condition) -> call(Then) ; call(Else).


%Determine the Allen relationship of two lines 
%and find the move path that makes them the optimal relationship

%Since human reading habits are predominantly left-to-right, 
%the optimal relationship is defined as "left-aligned", i.e. "start" and "startedby".

findallenrelations(A,B) :-
    
 
    findStart(A,StartA),
    findStart(B,StartB),
    findEnd(A,EndA),
    findEnd(B,EndB),
    
%  Start the loop 
    if_then_else(
        % If EndA+1 < StartB, then the relationship between A and B is "before"
        EndA + 1 < StartB,
        (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'before'")),
        
        %If EndA+1 = StartB, then the relationship between A and B is "meet".
        if_then_else(
            (EndA < StartB, EndA + 1>= StartB),
            (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'meets'")),
            
            %If EndA+1 is neither less than nor equal to StartB, then start comparing StartA and StartB
            if_then_else(
                
                %If StartA < StartB,there are 3 possibilities.
                StartA < StartB,
                
                if_then_else(
                    %If EndA < EndB, then the relationship between A and B is "overlaps".
                    EndA < EndB,
                    (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'overlaps'")),
                    
                    if_then_else(
                        %If EndA = EndB, then the relationship between A and B is "endedby".
                        EndA = EndB,
                        (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'endby'")),
                        %If EndA is neither less than nor equal to EndB, then the relationship between A and B is "contains".
                        (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'contains'"))
                        )
                    ),
                
                if_then_else(
                   
                    %If StartA = StartB,there are 3 possibilities.
                    StartA = StartB,
                    
                    if_then_else(
                        %If EndA < EndB, then the relationship between A and B is "Starts".
                        EndA < EndB,
                        (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'starts'")),
                        
                        if_then_else(
                            %If EndA = EndB, then the relationship between A and B is "equals".
                            EndA = EndB,
                            (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'equals'")),
                             %If EndA is neither less than nor equal to EndB, then the relationship between A and B is "startedby".
                            (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'startedby'"))
                            )
                        ),
                    
                    %If StartA is neither less than nor equal to StartB, then there are 5 possibilities
                    if_then_else(
                        
                        %If EndA < EndB, then the relationship between A and B is "during".
                        EndA < EndB,
                        (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'during'")),
                        
                        if_then_else(
                            %If EndA = EndB, then the relationship between A and B is "ends".
                            EndA = EndB,
                            (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'ends'")),
                            
                             %If EndA is neither less than nor equal to EndBï¼Œthen start comparing StartA and EndB + 1 , there are 3 possibilities
                            if_then_else(
                                
                                %If StartA < EndB + 1, then the relationship between A and B is "overlappedby".
                                StartA < EndB + 1,
                               (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'overlappedby'")),
                                
                                if_then_else(
                                    %If StartA = EndB + 1, then the relationship between A and B is "metby".
                                    (StartA > EndB,StartA =< EndB + 1),
                                    (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'metby'")),
                                     %If StartA is neither less than nor equal to EndB + 1, then the relationship between A and B is "after".
                                    (write("The Allen relationship of " ), write(A), write(" to " ), write(B), write( " is  'after'"))
                                    )
                                )
                            )
                        )
                    )
                )
            )
        ).

test(A,B,L1,L2) :-
    findallenrelations(A,B),nl,
    alignedLeft(A,B,L1,L2).


%split array with the index 

splitList(L,Idx,Res1,Res2):-
  append(Res1,Res2,L),
  TmpLen is Idx+1,
  length(Res1,TmpLen).



% get Index from the array
% nth0(TmpIndex_a,[0,0,0,1,1,1,0,0],1)  3
% nth0(4,[0,0,0,1,1,1,0,0],1)
% nth0(TmpIndex_b,B,1)      1 
% append([1, 1, 1, 0, 0],[0,0,0],NewL) [1, 1, 1, 0, 0, 0, 0, 0]
% appendList([1, 1, 1, 0, 0, 0, 0, 0],[0,1,1,0,0,0,0,0],L).
%Q 1
alignedLeft(A,B,L1,L2):-

  write("Make "), write(A), write(" and "), write(B), write(" left-aligned need :"),nl,  
  nth0(TmpIndex_a,A,1),
  nth0(TmpIndex_b,B,1),
    
  (TmpIndex_a > TmpIndex_b ->
    TmpSplitIdx is TmpIndex_a-TmpIndex_b,
    write('Let '), write(A), write(" move "),
    write(TmpSplitIdx),
    write(" steps to the left"), nl,
      
    splitList(A,TmpSplitIdx-1,L,RestL),
    append(RestL,L,L1),
    L2 = B;
    TmpSplitIdx is TmpIndex_b-TmpIndex_a,
    
    write('Let '), write(B), write(" move "),
    write(TmpSplitIdx),
    write(" steps to the left"),nl,
      
    splitList(B,TmpSplitIdx-1,L,RestL),
    append(RestL,L,L2),
    L1 = A

    ).


% create some number of One to make an array

allOne([]).
allOne([1|ResP]) :-
  allOne(ResP).

createOneArr(N,P) :-
  allOne(P),
  length(P,N).  

zeroes(0,[]) :- !.
zeroes(N, [0|T]) :- M is N - 1, zeroes(M,T).
makeTest(N,P,X) :- 
  M is 12 - N, 
  zeroes(N,ZN),
  zeroes(M,ZM), 
  createOneArr(P,TmpOneArr),
  append(ZN,TmpOneArr,Temp), 
  append(Temp,ZM,X).


try(M,P,N,Q) :- makeTest(M,P,A),
            makeTest(N,Q,B),
            write(A), nl, write(B), nl,
            test(A,B,_,_),nl,nl.



testLots1(M,P,N,Q) :- N > -1,
                try(M,P,N,Q),
                K is N - 1,
                testLots1(M,P,K,Q).
testLots1(_,_,-1,_).

% testLots(2,2,3,3)
% testLots1(3,4,5,2)
 
testLots(M,P,N,Q) :- M > -1,
                 testLots1(M,P,N,Q),
                 K is M - 1,
                 testLots(K,P,N,Q).
testLots(-1,_,_,_).  







